import java.io.*;
import java.net.*;
import java.util.*;

public class ChatServerTcp {
    private static Set<ClientHandler> clientHandlers = Collections.synchronizedSet(new HashSet<>());

    public static void main(String[] args) {
        int port = 12345; // Server listens on this port

        try (ServerSocket serverSocket = new ServerSocket(port)) {
            System.out.println("Chat server started on port " + port);

            while (true) {
                Socket socket = serverSocket.accept();
                System.out.println("New client connected: " + socket.getInetAddress());

                ClientHandler handler = new ClientHandler(socket);
                clientHandlers.add(handler);
                handler.start();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Broadcast message to all clients
    public static void broadcast(String message, ClientHandler excludeHandler) {
        synchronized (clientHandlers) {
            for (ClientHandler handler : clientHandlers) {
                if (handler != excludeHandler) {
                    handler.sendMessage(message);
                }
            }
        }
    }

    // Remove a client from the handler set
    public static void removeClient(ClientHandler handler) {
        clientHandlers.remove(handler);
    }
}

class ClientHandler extends Thread {
    private Socket socket;
    private PrintWriter out;
    private BufferedReader in;

    public ClientHandler(Socket socket) {
        this.socket = socket;
    }

    public void run() {
        try {
            out = new PrintWriter(socket.getOutputStream(), true);
            in  = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            String name = in.readLine(); // First message is client name
            ChatServerTcp.broadcast(name + " joined the chat!", this);
            String message;

            while ((message = in.readLine()) != null) {
                System.out.println(name + ": " + message);
                ChatServerTcp.broadcast(name + ": " + message, this);
            }

        } catch (IOException e) {
            System.out.println("Client disconnected: " + socket.getInetAddress());
        } finally {
            ChatServerTcp.removeClient(this);
            try {
                socket.close();
            } catch (IOException e) { e.printStackTrace(); }
        }
    }

    public void sendMessage(String message) {
        out.println(message);
    }
}
