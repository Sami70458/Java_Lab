import java.util.*;

public class DijkstraAlgorithm {
    private static final int INF = Integer.MAX_VALUE;

    public static void dijkstra(int[][] graph, int src) {
        int V = graph.length;
        int[] dist = new int[V];       // Output array: shortest distances from src to i
        boolean[] visited = new boolean[V]; // visited[i] = true if vertex i's shortest distance is finalized

        // Step 1: Initialize distances
        Arrays.fill(dist, INF);
        dist[src] = 0;

        // Step 2: Find shortest path for all vertices
        for (int count = 0; count < V - 1; count++) {
            int u = selectMinVertex(dist, visited);
            visited[u] = true;

            // Step 3: Update distances of adjacent vertices
            for (int v = 0; v < V; v++) {
                if (!visited[v] && graph[u][v] != 0 && graph[u][v] != INF &&
                        dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                    dist[v] = dist[u] + graph[u][v];
                }
            }
        }

        // Print the result
        System.out.println("Vertex \t Distance from Source " + src);
        for (int i = 0; i < V; i++) {
            System.out.println(i + " \t\t " + (dist[i] == INF ? "INF" : dist[i]));
        }
    }

    private static int selectMinVertex(int[] dist, boolean[] visited) {
        int min = INF, minIndex = -1;
        for (int i = 0; i < dist.length; i++) {
            if (!visited[i] && dist[i] < min) {
                min = dist[i];
                minIndex = i;
            }
        }
        return minIndex;
    }

    // Main method
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of vertices: ");
        int V = sc.nextInt();

        int[][] graph = new int[V][V];
        System.out.println("Enter the adjacency matrix (use 0 if no edge):");
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                graph[i][j] = sc.nextInt();
                if (i != j && graph[i][j] == 0) {
                    graph[i][j] = INF; // No direct edge
                }
            }
        }

        System.out.print("Enter source vertex (0 to " + (V - 1) + "): ");
        int source = sc.nextInt();

        dijkstra(graph, source);
        sc.close();
    }
}
